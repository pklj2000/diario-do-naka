import * as CurrentGitBranch from "current-git-branch";
export declare const PROD_URL = "https://bohr.io";
export declare const cliFetch: (url: string, options?: any) => Promise<any>;
export declare function getMainEndpoint(DEV_MODE: boolean): Promise<string>;
export declare function checkBohrAPIStatus(baseUrl: string): Promise<any>;
export declare function getBohrAPI(baseUrl: string, secret: string): Promise<import("axios").AxiosInstance>;
export declare function runInstall(command: string, showOutput: boolean, showError: boolean): Promise<void>;
export declare function hideExperimentalWarning(): void;
export declare function getCurrentGit(): Promise<{
    REPOSITORY: any;
    REF_NAME: CurrentGitBranch.CurrentGitBranchResult;
} | null>;
export declare function isBohrPath(): boolean;
export declare function getGlobalBohrPath(): string;
export declare function execNpm(cmd: string, noParseJson?: boolean): {
    success: boolean;
    result: any;
    error?: undefined;
    ret?: undefined;
} | {
    success: boolean;
    error: unknown;
    ret: any;
    result?: undefined;
};
declare type spawnAsyncResult = {
    stdout: string;
    stderr: string;
    code: number;
};
export declare function spawnAsync(command: string, showOutput: boolean, showError: boolean): Promise<spawnAsyncResult>;
export declare function info(label: string, message: string): void;
export declare function warn(label: string, message: string): void;
export declare function loading(label: string, message: string): void;
export declare function logError(label: string, message: string): void;
export declare function link(url: string): string;
export declare function getFileExtension(path: string): any;
export declare function base64ArrayBuffer(arrayBuffer: any): string;
export declare function b64ToBuf(base64: string): ArrayBuffer;
export declare function ab2str(buf: any): string;
export declare function copyFolderRecursive(source: string, destination: string): Promise<void>;
export declare function createRunScript(destination: string, type: string, filename?: string): void;
export declare function createZip(directoryPath: string, zipFilePath: string): Promise<unknown>;
export declare function checkAndCreateNextConfigFile(): Promise<void>;
export declare function checkAndCreateWorkflowFile(): Promise<void>;
export {};
