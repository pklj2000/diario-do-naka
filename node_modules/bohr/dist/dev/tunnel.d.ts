/// <reference types="node" />
/// <reference types="pino-http" />
/// <reference types="node" />
import * as WebSocket from 'ws';
import { AxiosInstance } from 'axios';
import { EventEmitter } from 'events';
import { IncomingMessage } from 'http';
import { DevServer } from './devServer.js';
import { FunctionServer } from './functionServer.js';
export interface TunnelOptions {
    bohrApi: AxiosInstance;
    devMode: boolean;
    devServer: DevServer;
    functionServer: FunctionServer;
}
export declare class Tunnel extends EventEmitter {
    opts: TunnelOptions;
    port?: number;
    currentWebSocket: any;
    requests: any[];
    textExtensions: string[];
    key: any;
    address: any;
    ws: WebSocket;
    isRejoing: boolean;
    startTime: number;
    rejoinInterval: number;
    pingTimeoutId: any;
    pingTimeout: number;
    fetch: any;
    httpsAgent: any;
    constructor(opts: TunnelOptions);
    init(): Promise<void>;
    start(): Promise<void>;
    join(): Promise<void>;
    sendRequest(request: IncomingMessage, bodyBuf: ArrayBufferLike): Promise<any>;
    quit(ws: WebSocket): Promise<void>;
    sendRaw(ws: WebSocket, message: any): Promise<void>;
    sendMessage(ws: WebSocket, message: any): void;
    rejoin(ws: WebSocket): Promise<void>;
    bindEventListeners(ws: WebSocket): void;
    processRawMessage(ws: WebSocket, data: WebSocket.Data): Promise<void>;
    processMessage(ws: WebSocket, data: any): Promise<void>;
    processRequest(ws: WebSocket, data: any): Promise<{
        status: any;
        body: any;
        headers: {
            [k: string]: any;
        };
        isBase64: boolean;
    } | undefined>;
    processResponse(data: any): void;
}
