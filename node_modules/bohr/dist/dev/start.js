"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StartDev = void 0;
const events_1 = require("events");
const utils_1 = require("../utils");
const login_1 = require("../commands/login");
const path = require('path');
class StartDev extends events_1.EventEmitter {
    constructor(opts) {
        super();
        this.tryAutoLogin = false;
        this.opts = opts;
    }
    async run() {
        try {
            const git = await (0, utils_1.getCurrentGit)();
            const defaultName = '/' + path.basename(process.cwd()).replace(/\s/g, '-');
            let REPOSITORY = process.env.BOHR_REPOSITORY || (git === null || git === void 0 ? void 0 : git.REPOSITORY) || defaultName;
            console.log('REPOSITORY=' + REPOSITORY);
            let REPO_OWNER = REPOSITORY.split('/')[0];
            let REPO_NAME = REPOSITORY.split('/')[1];
            let REF_TYPE = process.env.BOHR_REF_TYPE || "BRANCH";
            let REF_NAME = process.env.BOHR_REF_NAME || (git === null || git === void 0 ? void 0 : git.REF_NAME) || 'main';
            const res = await this.opts.bohrApi.post(`/dev/start`, {
                REPO_OWNER,
                REPO_NAME,
                REF_TYPE,
                REF_NAME
            });
            Object.keys(res.data.env).forEach(function (key) { process.env[key] = res.data.env[key]; });
        }
        catch (error) {
            if (error.message.indexOf('Request failed with status code 401') != -1) {
                if (!this.tryAutoLogin) {
                    this.tryAutoLogin = true;
                    (0, utils_1.loading)('DEV_MODE', 'Calling auto login...');
                    await login_1.default.run();
                    const config = new (require('conf'))();
                    Object.assign(this.opts.bohrApi.defaults.headers, { 'Cookie': 'BohrSession=' + config.get('token') });
                    return await this.run();
                }
                else {
                    console.error('Please, run "login" command first.');
                    //@ts-ignore
                    originalProcessExit(1);
                }
            }
            console.error(error);
            if (this.opts.devMode) {
                (0, utils_1.loading)('DEV_MODE', 'Trying load bohr.env...');
                require('dotenv').config({ path: ".env" });
            }
            else {
                //@ts-ignore
                originalProcessExit(1);
            }
        }
    }
    ;
}
exports.StartDev = StartDev;
