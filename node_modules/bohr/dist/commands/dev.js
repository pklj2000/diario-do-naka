"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@oclif/core");
const devServer_1 = require("../dev/devServer");
const functionServer_1 = require("../dev/functionServer");
const mainServer_1 = require("../dev/mainServer");
const tunnel_1 = require("../dev/tunnel");
const start_1 = require("../dev/start");
const utils_1 = require("../utils");
const pjson = require('../../package.json');
const path = require('path');
require('dotenv').config({ path: path.resolve(process.cwd(), '.bohr.env') });
class Dev extends core_1.Command {
    async run() {
        this.log('');
        var originalConsoleError = console.error;
        const originalExit = process.exit;
        //@ts-ignore
        global.originalProcessExit = process.exit;
        //@ts-ignore
        process.exit = function processEmit(...args) {
            return;
        };
        console.error = function (...args) {
            try {
                if (args[0].indexOf('Error: timed out') != -1)
                    return;
            }
            catch (error) {
            }
            return originalConsoleError.apply(this, args);
        };
        const { flags } = await this.parse(Dev);
        const DEV_MODE = (!pjson.bohrEnv) && (!process.env.GITHUB_ACTIONS);
        if (DEV_MODE) {
            flags['show-install'] = true;
            flags['show-dev'] = true;
        }
        let bohrApi = await (0, utils_1.getBohrAPI)(await (0, utils_1.getMainEndpoint)(DEV_MODE) + '/api', new (require('conf'))().get('token'));
        await (new start_1.StartDev({
            bohrApi,
            devMode: DEV_MODE
        })).run();
        if (process.env.INSTALL_CMD && !flags['no-install']) {
            await (0, utils_1.runInstall)(process.env.INSTALL_CMD, flags['show-install'], true);
        }
        let DEPLOY_PATH = process.env.DEPLOY_PATH != null ? process.env.DEPLOY_PATH : './';
        let PUBLIC_PATH = process.env.PUBLIC_PATH != null ? process.env.PUBLIC_PATH : DEPLOY_PATH;
        if (PUBLIC_PATH.substring(0, 1) == '/')
            PUBLIC_PATH = `.${PUBLIC_PATH}`;
        if (PUBLIC_PATH.substring(0, 2) != './')
            PUBLIC_PATH = `./${PUBLIC_PATH}`;
        const devServer = new devServer_1.DevServer({
            command: process.env.DEV_CMD,
            publicPath: PUBLIC_PATH,
            flags
        });
        const functionServer = new functionServer_1.FunctionServer();
        const tunnel = new tunnel_1.Tunnel({
            bohrApi,
            devMode: DEV_MODE,
            devServer,
            functionServer
        });
        const mainServer = new mainServer_1.MainServer({ tunnel });
        mainServer.on('ready', () => {
            this.log('\n');
            (0, utils_1.info)('READY', 'Server running on ' + (0, utils_1.link)('http://' + mainServer.host));
            (0, utils_1.info)('READY', 'Tunnel running on ' + (0, utils_1.link)('https://' + process.env.BOHR_TUNNEL_URL));
            (0, utils_1.info)('READY', 'API running on ' + (0, utils_1.link)('http://' + mainServer.host + '/api'));
            try {
                if (process.env.BOHR_LOCALHOST_ID) {
                    bohrApi.put(`/dev/localhost`, { id: process.env.BOHR_LOCALHOST_ID, status: "RUNNING" });
                }
            }
            catch (error) {
                console.error(error);
            }
            if (!DEV_MODE)
                require('open')('http://' + mainServer.host);
        });
        await devServer.run();
        await functionServer.run();
        await tunnel.init();
        await mainServer.run();
        process.on('SIGINT', async function () {
            try {
                if (process.env.BOHR_LOCALHOST_ID) {
                    await bohrApi.put(`/dev/localhost`, { id: process.env.BOHR_LOCALHOST_ID, status: "CLOSED" });
                }
            }
            catch (error) {
                console.error(error);
            }
            originalExit(0);
        });
    }
}
exports.default = Dev;
Dev.description = 'Run localhost environment';
Dev.flags = {
    'no-install': core_1.Flags.boolean({ default: false, description: 'bypass install command' }),
    'no-dev': core_1.Flags.boolean({ default: false, description: 'bypass dev command' }),
    'show-install': core_1.Flags.boolean({ default: false, description: 'show install command output' }),
    'show-dev': core_1.Flags.boolean({ default: false, description: 'show dev command output' })
};
