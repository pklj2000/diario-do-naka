"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@oclif/core");
const http = require("http");
const portfinder = require("portfinder");
const utils_1 = require("../utils");
const pjson = require('../../package.json');
class Login extends core_1.Command {
    async run() {
        this.log('');
        let DEV_MODE = (!pjson.bohrEnv);
        const { flags } = await this.parse(Login);
        if (flags.token) {
            this.saveToken(flags.token);
            (0, utils_1.info)('DONE', 'Login successful!');
            return;
        }
        let MAIN_ENDPOINT = await (0, utils_1.getMainEndpoint)(DEV_MODE);
        if (!await (0, utils_1.checkBohrAPIStatus)(MAIN_ENDPOINT + '/api')) {
            (0, utils_1.logError)('ERROR', 'API error, trying use production API...');
            MAIN_ENDPOINT = utils_1.PROD_URL;
        }
        const TEMP_PORT = await portfinder.getPortPromise({ port: 8796 });
        const login_url = MAIN_ENDPOINT + '/login-cli?port=' + TEMP_PORT;
        const ora = require('ora');
        const spinner = ora('Please, access the URL: ' + login_url);
        await new Promise((resolve, reject) => {
            const sockets = new Set();
            const server = http.createServer((request, response) => {
                const url = require('url');
                const query = url.parse(request.url, true).query;
                this.saveToken(query.token);
                response.writeHead(302, { 'Location': MAIN_ENDPOINT + '/home' });
                response.end();
                for (const socket of sockets) {
                    socket.destroy();
                    sockets.delete(socket);
                }
                server.close(() => {
                    spinner.succeed();
                    this.log('');
                    (0, utils_1.info)('DONE', 'Login successful!');
                    resolve();
                });
            });
            server.on('connection', (socket) => {
                sockets.add(socket);
                server.once('close', () => {
                    sockets.delete(socket);
                });
            });
            server.listen(TEMP_PORT);
            spinner.start();
            require('open')(login_url);
        });
    }
    saveToken(token) {
        const Conf = require('conf');
        const config = new Conf();
        config.set('token', token);
    }
}
exports.default = Login;
Login.description = 'Login in your bohr.io account';
Login.args = [{ name: 'dev', description: 'called from command bohr dev' }];
Login.flags = {
    token: core_1.Flags.string({ char: 't', description: 'optional token' }),
};
